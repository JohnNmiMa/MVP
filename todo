Create wireframe of code snippet app - DONE

Implement basic UX flow w/ bootstrap
  - Implement for desktop and tablet - not iPhone - DONE
  - Create header (Title, search bar, Sign-In, Gear) - DONE

Implement user signup/login and account persistence
  - Hookup Sign-In button to Sign-In page - DONE
  - Implement OAuth for google (twitter & facebook later) - DONE
    - Hookup the Google button to do google oauth - DONE
  - Create user session according to email address - DONE
  - Persist user data (Name, email, ???) - DONE
    - CouchDB, MongoDB, Reddis
    - Create/persist default "General" topic for each user - DONE
  - Implement "Sign Out" button - DONE

Implement snippet page format - DONE
  - Wide page only - DONE
  - Implement Horz and Vert Layout - DONE
    - Create some dummy snippets to use for layout - DONE
    - Implement Horz and Vert buttons - DONE
    - Create JavaScript to toggle CSS for each snippet - DONE

Add "Snippets"
  - Hook up plus button to snippet form page - DONE
  - ship code snippet to server (per user) - DONE
    - can't create snippets if not signed in - DONE
    - persist the snippet in the topic - DONE
  l Add jQuery-ACE for code snippets
  l Add text editor for code descriptions

Add "Topic" widget (left column) - DONE
  - Add "General" topic - DONE
  - Be able to get list of topics from server - DONE
    - display list in the topic panel - DONE
  - Clicking of topic title
    - When a snippet is clicked, a topic title to page - DONE
    - Create python script to add sample snippets to db - for test use - DONE
    - Don't show any snippets upon login - DONE
    - Snow snippets when topic title is clicked - DONE
      - Add a timestamp to snippets - DONE
      - Bring back list of snippets sorted according to time - DONE
  l Add "All" topic
  - Show snippet count in topic panel for each topic - DONE
  - Highlight selected topic - DONE

Create "Topics"
  - Add "Plus Button" to create topic - DONE
    - Add the topicForm - DONE
    - Persist the topic - DONE
      - if topic already exists - tell user to pick a new topic name - DONE
    - Update the UI with the new topic - DONE

Delete "Topics"
  - Figure out UI - DONE
    - prompt user to delete topic
  - Send request to remove the topic id resource - DONE
    - In server, move all snippets in the topic to the General topic - DONE
    - In server, delete the topic. - DONE

Delete "Snippets"
  - Add UI to delete a snippet - DONE
    - Redesign the snippet html/css - DONE
    - Add the new design - DONE
    - Add the snippet id to the snippet - DONE
    - Add hover effect for snippet selector - DONE
    - Add "Snip it", "Delete", and "Edit" to hover div - DONE
  - Update db in server - DONE
  - Update UI to by removing the snippet from the DOM - DONE

Topic and snippet delete confirmation dialogs - DONE
  - Use Bootstrap Modal Dialogs - DONE

Snippet search capabilities
  - Add user snippet counter to search box upon login - DONE
    - Add personal-snippets / public-snippets - DONE
      - /snippets/personal/?... - DONE
      - /snippets/public/?... - DONE
  - Send search query to server (/snippets/search/<public> or <personal> - DONE
  - Create db query, and get results for public search - DONE
  - Create db query, and get results for personal search - DONE
  - Return results in JSON - DONE
  - In JavaScript, take JSON, unpack it, and for each snippet, add to page - DONE
    - Remove topic name in snippet bar - DONE
    - Add words '"the search str" search' in snippet bar - DONE

Edit "Topics"
  - Figure out UI - DONE
  - if topic is renamed, update name in database - DONE
    - when clicking on name, replace with input field and add topic name - DONE
    - upon return, grab new topic name - DONE
    - send a PUT with new name and topic id to server - DONE
    - in server, create PUT endpoint /topics/id with new name - DONE
    - persist name in db and return success to client - DONE
    - in client, remove input field, and replace with new topic name - DONE

Edit "Snippets"
  - Update snippetForm to have snippetFormBar - DONE
    - add cancel button - DONE
    l add public/private icon (eye)
    l add topic selector
    l add language selector for jQuery ACE
  - Make snippetForm relocatable - DONE
  - Hookup up "Snippet Edit" - DONE
    - Print out to console when edit button is clicked - DONE
    - Add snippetEdit function: - DONE
      - add snippet data into snippetForm - DONE
      - show form in correct place in DOM - DONE
      - call snippetUpdate() - DONE
    - Add snippetUpdate function to send AJAX PUT request to update snippet - DONE
  - Hide and reset snippetForm if "Cancel" is called - DONE

Add ability to change individual snippet layout
  - Add col and row icons to Snippet Selector layout when in Title Only mode - DONE
  - Add title only icon to Snippet Selector layout when NOT in Title Only mode - DONE
  - Add showSnippetHorizontal = function($snippet) {...} - DONE
  - Add showSnippetVertical = function($snippet) {...} - DONE
  - Add showSnippetTitleOnly = function($snippet) {...} - DONE

Implement Javascript embedded code editor for code div/textarea
  - try jQuery ACE - is tough to embed, doesn't work - DONE
  - try CodeMirror  - DONE
    - read docs - DONE
    - set font size - DONE
    - set language - DONE
    - get CodeMirror input area into textarea and save away - DONE
      ? should a primary textarea be used, and managed by CodeMirror and its own div
        - can use CodeMirror methods to move data back and forth - YES, this works great.
          And this is especially how CodeMirror designed this to work.
      ? or should we just manage the CodeMirror div without our own textarea. Didn't try.
        Could be done, but really has no extra value.
    - get textarea into CodeMirror input area - DONE
      - what is getting saved? (HTML, raw text, ...?)
    - get input area sizable - DONE

Implement text editor for description - DONE
  - just use the same implementation as done for the code textarea. - DONE
  - make the language "text & html" only. Maybe add markup later. - DONE

Snippet Form Cleanup
  - Add form selection borders (description and code textareas) - DONE
  - get line height of form the same as when viewing des and code - DONE
  - try the Markup mode for the description area
    - NOTE: only styles markup, doesn't render Markup. Need a true Markup editor.
            CodeMirror is only for styling, and will not support WSYWIG or Markup
  - let the topic panel move during snippet edit - DONE
  l can we save a large string of the editors contents that includes
    the <span> tags? This would simplify the number of nodes in the DOM greatly

Create "Welcome" topic in the SomeCode account, and put it in every new account - DONE
  - initialize it in di.py script - DONE
    - do it before the user accounts are created - DONE
  - Add the Welcome topic to each new account - DONE

Change snippet public or private state in snippet edit - DONE
  - If snippet is owned by logged in user, toggle public or private - DONE
  - On snippet create, if public, increment the public counter - DONE
  - On snippet edit, if public access changed, update the public counter - DONE
  - On snippet delete, if public, decrement the public counter - DONE

Tidy up code
  - create topicCrud object
  - create snippetCrud object

Change DB to something that persists on Heroku (Postgres)

Push to Heroku

Implement Gear
  - Add "Setting" model in server
  - Save away last_used_topic in settings upon logout.
    - When the user logs in, display the last_used topic.
  - Create Settings UI
  - Set default for snippet creation to public or private
  - Set user snippet color
  - Set public snippet color
  - Set code line spacing
  - Set snippet theme
    - Create checkbox to show different language attributes
    - variables, keywords, operators, punctuation, strings, comments

Associate snippet with a topic or multiple topics (MAYBE)
  - Update database to support a many-to-many relationship
  - Provide ability to move to topic
    - Figure out UI
    - Update db to remove old topic link and associate snippet to new topic link
  - Provide ability to add to topic
    - Figure out UI
    - Update db to associate snippet to new topic link
      - show that the snippt belongs in multiple topics

When deleting topics, query if all snippets should get deleted, or pushed to the General/another topic

Sort snippets in a topic (Don't sort under General topic)
  - Sort by time, alphabetically, or custom
  - Custom sort will require each snippet to be draggable with drag bars
    - Add the pencil icon or 'edit' word to do custom order when in custom sort mode

Add "All" topic to show all topics. This will be useful with the language filter

Implement Language Filter

Add email or ability to forward to another user's inbox
  - add Inbox, so that other users can forward snippets
    - add snippet URL (contains snippet ID) to see snippet
  - snippet must be public to see

iPhone layout:
* Remove topic and snippet create
* Show only row and title only layout

Desktop Layout Improvements:
1) Make topic panel horizontally resizable
2) Make topic panel span full height of page
3) Make snippet description flow around code when in columnar layout
4) Keep Topic Panel & Snippet Bar from scrolling off top of page
   - maybe make snippet panel scrollable
5) Make a snippet dragabble to topic
6) Make better private vs public (eye) icons

Add incremental updates for many snippets

Future:
1) Persist to local storage for offline support
2) Figure out how to support other modules:
   Notes, Todos, Projects, Books, Pomodoro, Scrum-like Backlog etc)
   - Be able to support in left panel
   - Be able to load modules
3) Create native iPhone app
4) How to add features for payment
5) Add stats page:
   - show most used language (use overall, last year, last month, etc)
   - snippets created over time
   - public vs private snippets
   - total users, topics, snippets
6) Share topics
7) Add multiple snippet blocks per snippet

--------
Bugs:
* Login overlay is underneath layout icons. - DONE
* Title length can be created bigger than desired.
* Title field does not wrap.
* Topic count is not incremented when a new snippet is added - DONE
* When new topic is added, put it in the list below the 'General' topic - DONE
* When switching topics, snippets are not displayed in the currently selected snippet layout - DONE
* When logging in, don't default to showing no topic. If first time, show the General topic
* Do a search on some personal snippet, then delete the snippet. The count in the topic where the snippet
  resided does not get decremented.
* Public snippets that are not personal snippets (snipped not owned by user) don't show with correct color. - DONE
* Should authenticate according to OAuth ID, not email. The email can change, but the ID will not change.

--------
Persistance Schema
* User data: User, email, ??? (One "User" to many "Topics")
  - there should be no "User" to "Snippet" relationship
* Snippet data: Topic, Title, Description, Code, snippetID, topicID (One "Snippet" to many "Topics")
* Topic list: Topic, User, topicID (One "Topic" to many "Snippets"
* Refresh main snippet page where no snippets are displayed, then
  Select a layout, then click a topic to get snippets on the page. They are not in the layout.

--------
URLs:
# web-page without logging in - can search all public snippets
/ or /index.html    - create a page when not logged in

/signin/<social>    - sign in using OAuth to some social site

/user               - create logged in user page

# Create, edit, and delet topics
POST   /topic/<atopic> - create a new topic with name 'atopic'. Return the new topic id.
PUT    /topic/<atopic> - update a topic with topic ID 'atopic'. Return the topic id that was changed.
DELETE /topic/<atopic> - delete a topic with topic ID 'atopic'. Return the number of topics added to the General list.

# Create, edit, delet, and list snippets
POST   /snippets/<topic> - create a new snippet under topic 'atopic'. Return the new snippet id.
DELETE /snippets/<topic> - delete a snippet with snippet ID of '<topic>'
PUT    /snippets/<topic> - edit a snippet with snippet ID of '<topic>'
GET    /snippets/<topic> - get all snippets in topic 'atopic'. Return the list of snippets.

# Search Snippets
GET    /snippets/search/personal - get all of a user's personal snippets matching a search string
GET    /snippets/search/public   - get all public snippets matching a search string

/logout - log the user out

Ubiquitous Language:
Public Snippet - Any user can search and view the snippet
  - All snippets viewed in the logged out page are public.
  - Only public snippets can be search from the logged out page.
  - Public snippets have the open-eye icon.
  - Is modeled as "access==ACCESS_PUBLIC" in the User model.

Private Snippet - Only the owner can search and view the snippet
  - Private snippets have the closed-eye icon.
  - Is modeled as "access==ACCESS_PRIVATE" in the User model.

Owned Snippet - The snippet creator id == the currently logged in user id
  - Owned snippets have a different color than non-owned snippets. This can be
    useful to differentiate a user's own created snippets vs those snippets
    that are linked/snipped in from another user.
  - Is modeled as creator_id in the Snippet model. Just compare the
    current user id with the creator id, and if the same, then it is
    owned by current user.
  - When there is no logged in user, there is no way to determine snippet ownership.
    Therefore all snippets will be colored as non-owned color.

Personal Snippet - The user has the snippet in some topic
  - The snippet could be "owned" by another user
  - Can be both public or private
  - Personal snippets (user's snippets) can be searched searched independently
    from public snippets
  - Only personal snippets can be edited and deleted
  - Only when logged in can snippets can be edited and deleted
  - All owned snippets are personal snippets
  - Linked snippets that are owned by another user, but are linked in a topic
    are also personal snippets. There is no way to detect this yet when building the snippet.

